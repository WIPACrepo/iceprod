#
# $Id$
#
CMAKE_MINIMUM_REQUIRED(VERSION 2.4.5 FATAL_ERROR)

INCLUDE(${CMAKE_SOURCE_DIR}/CMakeCache.optional.txt OPTIONAL)

SET(CMAKE_MODULE_PATH 
  ${CMAKE_SOURCE_DIR}/cmake 
  ${CMAKE_SOURCE_DIR}/cmake/tools 
  ${CMAKE_SOURCE_DIR}/cmake/utility)

INCLUDE(unique)
INCLUDE(config)
INCLUDE(tools)

INCLUDE(project)

ENABLE_TESTING()
INCLUDE(Dart)

EXECUTE_PROCESS(COMMAND mkdir -p ${CMAKE_BINARY_DIR}/docs/.tagfiles 
  OUTPUT_VARIABLE DEV_NULL)

#
#  Glob together a list of subdirectories containing a CMakeLists.txt
#
FILE(GLOB cmake_projects RELATIVE ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/*/CMakeLists.txt)
FILE(GLOB hidden_projects RELATIVE ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/.*/CMakeLists.txt)

IF(hidden_projects)
  LIST(REMOVE_ITEM cmake_projects ${hidden_projects})
ENDIF(hidden_projects)

FOREACH(d ${cmake_projects})
  GET_FILENAME_COMPONENT(proj ${d} PATH)
  SET(SUBDIRS ${SUBDIRS} ${proj})
ENDFOREACH(d ${cmake_projects})

FOREACH(subdir ${SUBDIRS})
  GET_FILENAME_COMPONENT(pname ${subdir} NAME_WE)
  ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/${pname})
  EXEC_PROGRAM(test ARGS -h ${CMAKE_BINARY_DIR}/${pname}/resources || ln -s ${CMAKE_SOURCE_DIR}/${pname}/resources ${CMAKE_BINARY_DIR}/${pname}/resources 
    OUTPUT_VARIABLE DEV_NULL)
  #
  # setup tagfiles for doxygen
  #
  EXEC_PROGRAM(touch ARGS ${CMAKE_BINARY_DIR}/docs/.tagfiles/${pname}.tag OUTPUT_VARIABLE DEV_NULL)
  FILE(WRITE ${CMAKE_BINARY_DIR}/docs/.tagfiles/${pname}.include "# autogenerated doxy include file\n")
  MESSAGE(STATUS "Configured project ${pname}.")
ENDFOREACH(subdir ${SUBDIRS})

#
# configure environment files, etc.
#
FOREACH (file make_tarball.sh env-shell.sh)
  MESSAGE(STATUS "Generating ${file}")
  CONFIGURE_FILE(
    ${CMAKE_SOURCE_DIR}/cmake/${file}.in
    ${CMAKE_CURRENT_BINARY_DIR}/${file}
    @ONLY
    )
  EXECUTE_PROCESS(COMMAND chmod 755 ${CMAKE_BINARY_DIR}/${file})
  EXEC_PROGRAM(cp ARGS ${CMAKE_BINARY_DIR}/${file} ${NOTES_DIR} OUTPUT_VARIABLE DEVNULL)
ENDFOREACH (file make_tarball.sh env-shell.sh)
EXEC_PROGRAM(${CMAKE_BINARY_DIR}/env-shell.sh ARGS /usr/bin/env > ${NOTES_DIR}/env-post_shell.txt OUTPUT_VARIABLE DEV_NULL)

IF(EXISTS ${CMAKE_SOURCE_DIR}/tarball_hook.sh.in) 
  MESSAGE(STATUS "Generating tarball_hook.sh")
  CONFIGURE_FILE(
    ${CMAKE_SOURCE_DIR}/tarball_hook.sh.in
    ${CMAKE_BINARY_DIR}/tarball_hook.sh
    @ONLY
    )
  EXECUTE_PROCESS(COMMAND chmod 755 ${CMAKE_BINARY_DIR}/tarball_hook.sh)
ENDIF(EXISTS ${CMAKE_SOURCE_DIR}/tarball_hook.sh.in) 

IF(NOT EXISTS ${CMAKE_BINARY_DIR}/log4cplus.conf)
  CONFIGURE_FILE(
    ${CMAKE_SOURCE_DIR}/cmake/log4cplus.conf.in
    ${CMAKE_BINARY_DIR}/log4cplus.conf
    )
ELSE(NOT EXISTS ${CMAKE_BINARY_DIR}/log4cplus.conf)
  MESSAGE(STATUS "Not configuring log4cplus.conf in ${CMAKE_BINARY_DIR} because the file already exists.")
ENDIF(NOT EXISTS ${CMAKE_BINARY_DIR}/log4cplus.conf)

MESSAGE(STATUS "Configuring 'gfilt' STL decryptor")
CONFIGURE_FILE(
  ${CMAKE_SOURCE_DIR}/cmake/gfilt.in
  ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/gfilt
  @ONLY
  )
SET(GFILT_PROGRAM 
  ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/gfilt
  CACHE FILEPATH "Gfilt error filter path")

  
FIND_PROGRAM(GFILT_PROGRAM gfilt PATHS ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY} NO_DEFAULT_PATH)


MESSAGE(STATUS "Configuring ctest custom settings")
CONFIGURE_FILE(
  ${CMAKE_SOURCE_DIR}/cmake/CTestCustom.cmake.in
  ${CMAKE_BINARY_DIR}/CTestCustom.cmake
  )

#
# Tarball target
#
ADD_CUSTOM_TARGET(tarball
  COMMAND /bin/echo Building installation directory ${CMAKE_INSTALL_PREFIX}...
  COMMAND mkdir -p ${CMAKE_INSTALL_PREFIX}/projects
  COMMAND mkdir -p ${CMAKE_INSTALL_PREFIX}/etc
  COMMAND ${CMAKE_MAKE_PROGRAM} install
  COMMAND ${CMAKE_MAKE_PROGRAM} install_tool_libs
  COMMAND ${CMAKE_CURRENT_BINARY_DIR}/make_tarball.sh
  COMMAND /bin/echo tarring... 
  COMMAND tar czf ${CMAKE_INSTALL_PREFIX}.tar.gz ${CMAKE_INSTALL_PREFIX}
  COMMAND echo "${CMAKE_INSTALL_PREFIX}.tar.gz created"
  COMMAND md5sum ${CMAKE_INSTALL_PREFIX}.tar.gz > ${CMAKE_INSTALL_PREFIX}.md5sum
  COMMAND echo "${CMAKE_INSTALL_PREFIX}.md5sum created"
  )

ADD_CUSTOM_TARGET(retarball
  COMMAND ${CMAKE_MAKE_PROGRAM} wipe-tarball
  COMMAND ${CMAKE_MAKE_PROGRAM} tarball
  )

ADD_CUSTOM_TARGET(wipe-tarball
  COMMAND /bin/echo Wiping old tarball and installation directory ${CMAKE_INSTALL_PREFIX}...
  COMMAND rm -rf ${CMAKE_INSTALL_PREFIX}
  COMMAND rm -f ${CMAKE_INSTALL_PREFIX}.tar.gz
  )

ADD_CUSTOM_TARGET(rsync
  COMMAND mkdir -p ${I3_PORTS}
  COMMAND rsync -vrlpt --delete code.icecube.wisc.edu::Offline/test-data ${I3_PORTS}/
  )

IF(NOT UNSUPERVISED_BUILD)

  OPTION(USE_GFILT "Use gfilt STL message decryptor" ON)
  IF(USE_GFILT)
    SET(CMAKE_CXX_COMPILE_OBJECT "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/gfilt ${CMAKE_CXX_COMPILE_OBJECT}")
  ENDIF(USE_GFILT)

  ADD_CUSTOM_TARGET(all-tests) 
  
  UNIQUE(UNIQUE_TEST_BINS "${ALL_TEST_BINS}")
  ADD_DEPENDENCIES(all-tests ${UNIQUE_TEST_BINS})

  #
  #  protect targets in project directories that would cause 
  #
  ADD_CUSTOM_TARGET(tests
    COMMAND /bin/echo 
    COMMAND /bin/echo "  tests: project-only target.  At the top level use target all-tests"
    COMMAND /bin/echo 
    COMMAND /bin/false)

  ADD_CUSTOM_TARGET(tests-run
    COMMAND /bin/echo
    COMMAND /bin/echo "  tests-run: project-only target.  At the top level, use target all-tests-run"
    COMMAND /bin/echo 
    COMMAND /bin/false)

  ADD_CUSTOM_TARGET(all-tests-run
    ${CMAKE_CTEST_COMMAND} -V test)
  ADD_DEPENDENCIES(all-tests-run all-tests)
ENDIF(NOT UNSUPERVISED_BUILD)
