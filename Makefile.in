
# @configure_input@

# some default variables
PREFIX=@prefix@
CC=@CC@
CFLAGS=@CFLAGS@
CPPFLAGS=@CPPFLAGS@
CXX=@CXX@
CXXFLAGS=@CXXFLAGS@
AWK=@AWK@
SED=@SED@
GREP=@GREP@
SHELL=@SHELL@
srcdir=@srcdir@
VPATH=@srcdir@

PATH:=$(PREFIX)/bin:$(PATH)
export PATH
LD_LIBRARY_PATH:=$(PREFIX)/lib:$(PREFIX)/lib64/:$(LD_LIBRARY_PATH)
export LD_LIBRARY_PATH
GLOBUS_LOCATION:=$(PREFIX)
export GLOBUS_LOCATION
C_INCLUDE_PATH:=$(PREFIX)/include:$(C_INCLUDE_PATH)
export C_INCLUDE_PATH
LIBRARY_PATH:=$(PREFIX)/lib:$(PREFIX)/lib64:$(LIBRARY_PATH)
export LIBRARY_PATH
PERL5LIB:=$(PREFIX)/lib/perl5:$(PREFIX)/lib/per5/site_perl:$(PERL5LIB)
export PERL5LIB

# custom variables
PLATFORM=@platform@
WWW=@www@
WWWFLAGS=@wwwflags@
TARBALL_NAME=@tarball_name@

# build packages
CONF_DEPS_URLS=ftp://ftp.gnu.org/gnu/libtool/libtool-2.4.2.tar.gz \
http://www.openssl.org/source/openssl-1.0.1b.tar.gz \
http://ftp.gnu.org/gnu/readline/readline-6.2.tar.gz \
ftp://xmlsoft.org/libxml2/libxml2-2.7.8.tar.gz \
ftp://xmlsoft.org/libxml2/libxslt-1.1.26.tar.gz \
ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.30.tar.gz \
http://curl.haxx.se/download/curl-7.25.0.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/expat-2.1.0.tar.gz \
http://www.cpan.org/src/5.0/perl-5.14.2.tar.gz \
http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/nginxuploadmodule-2.2.0.tar.gz \
http://nginx.org/download/nginx-1.2.0.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/p7zip-9.20.1.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/globus-5.2.1.tar.gz


CONF_DEPS=$(foreach confdeps,$(notdir $(CONF_DEPS_URLS)),$(filter-out %.tar.gz %.tgz,$(subst -, ,$(confdeps))))

PYTHON_DEPS_URLS=http://x2100.icecube.wisc.edu/downloads/iceprod2/pyOpenSSL-0.11.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/apsw-3.7.11.tar.gz \
http://pypi.python.org/packages/source/l/lxml/lxml-2.3.4.tar.gz \
http://pycurl.sourceforge.net/download/pycurl-7.19.0.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/tornado-2.2.tar.gz \
http://pypi.python.org/packages/source/j/jsonrpclib/jsonrpclib-0.1.3.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/tornadorpc-2.0.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/pyuv-0.6.1.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/pyuvtornado-0.5.0.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/pygridftp-1.3.2.tar.gz \
http://pypi.python.org/packages/source/c/coverage/coverage-3.5.2.tar.gz

PYTHON_DEPS=$(foreach pythondeps,$(notdir $(PYTHON_DEPS_URLS)),$(filter-out %.tar.gz %.tgz,$(subst -, ,$(pythondeps))))
#PYTHON_DEPS=pyopenssl apsw lxml pycurl tornado jsonrpclib tornadorpc pyuv pyuv-tornado coverage

DEPS_URLS=$(CONF_DEPS_URLS) $(PYTHON_DEPS_URLS)

ICEPROD=iceprod-core iceprod-client iceprod-server iceprod-modules


# decide to do prebuilt binary or src build
.PHONY : all install build
ifeq (@prebuilt@,prebuilt)
# prebuilt binary should be available
all : 
ifeq ($(wildcard $TARBALL_NAME),)
	echo "binary tarball not found"
	exit 1
else
	echo "nothing to do"
endif
install : makeprefixdir
ifeq ($(wildcard $TARBALL_NAME),)
	echo "binary tarball not found"
	exit 1
else
	tar -zx -C $(PREFIX) -f $(TARBALL_NAME)
endif

else
# build from sources
all : build

install : build makeprefixdir install_build


build : $(addsuffix _download,$(CONF_DEPS) $(PYTHON_DEPS))

install_build : $(addsuffix _configure,$(CONF_DEPS) $(PYTHON_DEPS)) iceprod_configure

endif

makeprefixdir :
	mkdir -p $(PREFIX)


eq=$(and $(findstring $(1),$(2)),$(findstring $(2),$(1)))
getdirname=$(if $(findstring .tgz,$(1)),$(basename $(1)),$(basename $(basename $(1))))
getdepname=$(firstword $(subst -, ,$(1)))
geturi=$(foreach var,$(DEPS_URLS),$(if $(call eq,$(1),$(call getdepname,$(call getdirname,$(notdir $(var))))),$(var),))
getconfdir=$(call getdirname,$(notdir $(call geturi,$(1))))


.PHONY : clean
clean : $(addsuffix _clean,$(CONF_DEPS))
	

.PHONY : distclean
distclean :
	rm -rf Makefile env-shell.sh 
	$(foreach var,$(CONF_DEPS) $(PYTHON_DEPS),rm -rf $(call getconfdir,$(var)) $(notdir $(call geturi,$(var)));)



# general download
%_download :
	$(eval url:=$(call geturi,$(firstword $(subst _, ,$@))))
	$(eval filename:=$(notdir $(url)))
	$(eval dirname:=$(call getdirname,$(filename)))
	$(if $(wildcard $(filename)),,$(WWW) $(WWWFLAGS) $(filename) $(url))
	$(if $(wildcard $(dirname)),,tar -zxf $(filename))

# general clean
%_clean :
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	$(if $(wildcard $(dirname)/Makefile),cd $(dirname);$(MAKE) clean,)


# now list the build instructions for each dependency

libtool_configure : libtool_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./configure --prefix=$(PREFIX);make;make install

openssl_configure : openssl_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./config --prefix=$(PREFIX) -fPIC;make;make install

readline_configure : readline_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./configure --prefix=$(PREFIX);make;make install

expat_configure : expat_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./configure --prefix=$(PREFIX);make;make install

# this is a globus dependency
perl_configure : perl_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./Configure -des -Dprefix=$(PREFIX);make;make install
	cpan App:cpanminus
	cpanm Archive::Tar
	cpanm Compress::Zlib
	cpanm Digest::MD5
	cpanm File::Spec
	cpanm IO::Zlib
	cpanm Pod::Parser
	cpanm Test::Simple
	cpanm XML::Parser

Python_configure : Python_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./configure --prefix=$(PREFIX) --enable-shared;make;make install

libxml2_configure : libxml2_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./configure --prefix=$(PREFIX) LDFLAGS=-L$(PREFIX)/lib/;make;make install

libxslt_configure : libxslt_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./configure --prefix=$(PREFIX) LDFLAGS=-L$(PREFIX)/lib/;make;make install

pcre_configure : pcre_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./configure --prefix=$(PREFIX);make;make install

nginxuploadmodule_configure : nginxuploadmodule_download

nginx_configure : nginx_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	$(eval pcredirname:=$(call getconfdir,pcre))
	$(eval uploadmoddirname:=$(call getconfdir,nginxuploadmodule))
	cd $(dirname);./configure --prefix=$(PREFIX) --with-ipv6 --with-http_ssl_module --without-http_geo_module \
--without-http_map_module --without-http_fastcgi_module --without-http_memcached_module --without-mail_pop3_module \
--without-mail_imap_module --without-mail_smtp_module --without-http_uwsgi_module --without-http_scgi_module \
--without-http_upstream_ip_hash_module --with-pcre=../$(pcredirname) --add-module=../$(uploadmoddirname);make;make install

curl_configure : curl_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./configure --prefix=$(PREFIX);make;make install

p7zip_configure : p7zip_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);./configure --prefix=$(PREFIX);make;make install

globus_configure : globus_download
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	$(if $(wildcard $(PREFIX)/etc),,mkdir $(PREFIX)/etc)
	cd $(dirname);./configure --prefix=$(PREFIX);make gpt globus-data-management-client;make install


pyconfig=cd $(call getconfdir,$(firstword $(subst _, ,$(1))));python setup.py build;python setup.py install

pyOpenSSL_configure : 
	$(call pyconfig,$@)

apsw_configure :
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	cd $(dirname);python setup.py fetch --sqlite;python setup.py build;python setup.py install

lxml_configure :
	$(call pyconfig,$@)

pycurl_configure :
	$(call pyconfig,$@)

tornado_configure :
	$(call pyconfig,$@)

jsonrpclib_configure :
	$(call pyconfig,$@)

tornadorpc_configure :
	$(call pyconfig,$@)

pyuv_configure :
	$(call pyconfig,$@)

pyuvtornado_configure :
	$(call pyconfig,$@)

pygridftp_configure :
	$(call pyconfig,$@)

coverage_configure :
	$(call pyconfig,$@)


iceprod_configure : 





# echo vars
echo :
	echo $(CONF_DEPS)
	echo $(PYTHON_DEPS)
	echo $(PATH)
	echo $(LD_LIBRARY_PATH)


