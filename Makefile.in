
# @configure_input@

# some default variables
PREFIX=@prefix@
CC=@CC@
CFLAGS=@CFLAGS@
CPPFLAGS=@CPPFLAGS@
CXX=@CXX@
CXXFLAGS=@CXXFLAGS@
AWK=@AWK@
SED=@SED@
GREP=@GREP@
SHELL=@SHELL@
srcdir=@srcdir@
VPATH=@srcdir@

NULL:=
SPACE:= $(NULL) 

@SET_MAKE@


# custom variables
PLATFORM=@platform@
WWW=@www@
WWWFLAGS=@wwwflags@
TARBALL_NAME=@tarball_name@
CORE_TARBALL_NAME=core_@tarball_name@

# build packages
CONF_DEPS_URLS=ftp://ftp.gnu.org/gnu/libtool/libtool-2.4.2.tar.gz \
http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz \
ftp://ftp.gnu.org/pub/gnu/ncurses/ncurses-5.9.tar.gz \
ftp://ftp.gnu.org/gnu/readline/readline-6.2.tar.gz \
ftp://ftp.gnu.org/pub/gnu/gettext/gettext-0.18.1.1.tar.gz \
http://www.openssl.org/source/openssl-1.0.1b.tar.gz \
http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz \
ftp://xmlsoft.org/libxml2/libxml2-2.7.8.tar.gz \
ftp://xmlsoft.org/libxml2/libxslt-1.1.26.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/pcre-8.30.tar.gz \
http://curl.haxx.se/download/curl-7.25.0.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/expat-2.1.0.tar.gz \
http://www.cpan.org/src/5.0/perl-5.14.2.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/nginxuploadmodule-2.2.0.tar.gz \
http://nginx.org/download/nginx-1.2.0.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/p7zip-9.20.1.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/globus-5.2.1.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/git-1.7.10.2.tar.gz

CONF_DEPS=$(foreach confdeps,$(notdir $(CONF_DEPS_URLS)),$(filter-out %.tar.gz %.tgz,$(subst -, ,$(confdeps))))

PYTHON_DEPS_URLS=http://pypi.python.org/packages/source/s/setuptools/setuptools-0.6c11.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/pyOpenSSL-0.11.tar.gz \
http://pypi.python.org/packages/source/p/pyasn1/pyasn1-0.1.3.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/apsw-3.7.11.tar.gz \
http://pypi.python.org/packages/source/l/lxml/lxml-2.3.4.tar.gz \
http://pycurl.sourceforge.net/download/pycurl-7.19.0.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/tornado-2.2.tar.gz \
http://pypi.python.org/packages/source/j/jsonrpclib/jsonrpclib-0.1.3.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/tornadorpc-2.0.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/pyuv-0.7.2.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/pyuvtornado-0.5.0.tar.gz \
http://x2100.icecube.wisc.edu/downloads/iceprod2/pygridftp-1.4.1.tar.gz \
http://pypi.python.org/packages/source/c/configobj/configobj-4.7.2.tar.gz \
http://pypi.python.org/packages/source/c/coverage/coverage-3.5.2.tar.gz \
http://pypi.python.org/packages/source/f/flexmock/flexmock-0.9.6.tar.gz

PYTHON_DEPS=$(foreach pythondeps,$(notdir $(PYTHON_DEPS_URLS)),$(filter-out %.tar.gz %.tgz,$(subst -, ,$(pythondeps))))

DEPS_URLS=$(CONF_DEPS_URLS) $(PYTHON_DEPS_URLS)

ICEPROD=iceprod-core iceprod-client iceprod-server iceprod-modules

# list only those that are needed for the iceprod core to run on remote nodes
CORE_DEPS=libtool bzip2 ncurses readline openssl Python libxml2 libxslt pcre curl expat perl globus p7zip pyOpenSSL apsw lxml pycurl jsonrpclib pygridftp
ICEPROD_CORE=iceprod-core iceprod-modules


# some useful functions
eq=$(and $(findstring $(1),$(2)),$(findstring $(2),$(1)))
getdirname=$(if $(findstring .tgz,$(1)),$(basename $(1)),$(basename $(basename $(1))))
getdepname=$(firstword $(subst -, ,$(1)))
geturi=$(foreach var,$(DEPS_URLS),$(if $(call eq,$(1),$(call getdepname,$(call getdirname,$(notdir $(var))))),$(var),))
getconfdir=$(call getdirname,$(notdir $(call geturi,$(1))))



# decide to do prebuilt binary or src build
.PHONY : all install build
ifeq (@prebuilt@,prebuilt)
# prebuilt binary should be available
all : 
ifeq ($(wildcard $(TARBALL_NAME)),)
	echo "binary tarball not found"
	exit 1
else
	echo "nothing to do"
endif
install : makeprefixdir
ifeq ($(wildcard $(TARBALL_NAME)),)
	echo "binary tarball not found"
	exit 1
else
	tar -zx -C $(PREFIX) -f $(TARBALL_NAME)
endif

core : 
ifeq ($(wildcard $(CORE_TARBALL_NAME),)
	echo "binary core_tarball not found"
	exit 1
else
	cp $(CORE_TARBALL_NAME) $(PREFIX)/$(CORE_TARBALL_NAME)
endif


else
# build from sources
all : build

install : build makeprefixdir install_build


build : $(addsuffix _download,$(CONF_DEPS) $(PYTHON_DEPS))

install_build : checkinstallhist exportvars install_config iceprod_config env-shell misc_config

core : $(addsuffix _download,$(CORE_DEPS)) install_core
install_core : OLD_PREFIX := $(PREFIX)
install_core : PREFIX := $(PREFIX)_core
install_core : checkinstallcorehist exportvars installcore_config iceprod_config_core env-shell core_tarball

endif


incmd:=$(if $(filter install%,$(MAKECMDGOALS)),YES,)
lasthist:=$(if $(wildcard Makefile.hist),$(shell $(SED) -n 1p Makefile.hist|tr -d '\n'),YES)
alreadyinstalled:=$(if $(wildcard Makefile.hist),$(shell $(SED) 1d Makefile.hist|tr '\n' ' '),)

define createinstallhist
 $(eval hist:=$(if $(incmd),$(if $(call eq,$(lasthist),install),,installclean),))
 checkinstallhist : $(hist)
	$(if $(hist),echo install > Makefile.hist,)
 install_config : $(if $(hist),$(addsuffix _configure,$(CONF_DEPS) $(PYTHON_DEPS)),$(foreach var,$(CONF_DEPS) $(PYTHON_DEPS),$(if $(filter $(var),$(alreadyinstalled)),,$(var)_configure)))
endef
$(eval $(call createinstallhist))
define createinstallcorehist
 $(eval hist:=$(if $(incmd),$(if $(call eq,$(lasthist),install_core),,installclean),))
 checkinstallcorehist : $(hist)
	$(if $(hist),echo install_core > Makefile.hist,)
 installcore_config : $(if $(hist),$(addsuffix _configure,$(CORE_DEPS)),$(foreach var,$(CORE_DEPS),$(if $(filter $(var),$(alreadyinstalled)),,$(var)_configure)))
endef
$(eval $(call createinstallcorehist))


moduleinstalled=$(shell echo $1 >> Makefile.hist)


ORIG_PATH:=$(PATH)
ORIG_LD_LIBRARY_PATH:=$(LD_LIBRARY_PATH)
ORIG_C_INCLUDE_PATH:=$(C_INCLUDE_PATH)
ORIG_LIBRARY_PATH:=$(LIBRARY_PATH)
ORIG_PERL5LIB:=$(PERL5LIB)
exportvars : 
	$(eval PATH:=$(PREFIX)/bin:$(ORIG_PATH))
	$(eval export PATH)
	$(eval LD_LIBRARY_PATH:=$(PREFIX)/lib:$(PREFIX)/lib64/:$(ORIG_LD_LIBRARY_PATH))
	$(eval export LD_LIBRARY_PATH)
	$(eval GLOBUS_LOCATION:=$(PREFIX))
	$(eval export GLOBUS_LOCATION)
	$(eval C_INCLUDE_PATH:=$(PREFIX)/include:$(ORIG_C_INCLUDE_PATH))
	$(eval LIBRARY_PATH:=$(PREFIX)/lib:$(PREFIX)/lib64:$(ORIG_LIBRARY_PATH))
	$(eval PERL5LIB:=$(PREFIX)/lib/perl:$(PREFIX)/lib/perl5:$(PREFIX)/lib/per5/site_perl:$(ORIG_PERL5LIB))
	$(eval export PERL5LIB)


makeprefixdir : 
	$(if $(wildcard $(PREFIX)),,$(foreach d,$(subst /, ,$(PREFIX)),mkdir $d && cd $d && ))

tarball : 
	$(eval curdir:=$(PWD))
	cd $(PREFIX);tar -zcf $(curdir)/$(TARBALL_NAME) *

core_tarball :
	-chmod -Rf 755 $(PREFIX)/share/doc/p7zip
	rm -rf $(PREFIX)/share/man $(PREFIX)/share/doc $(PREFIX)/share/gtk-doc $(PREFIX)/share/info $(PREFIX)/share/doxygen
	$(if $(wildcard $(OLD_PREFIX)),,$(foreach d,$(subst /, ,$(OLD_PREFIX)),mkdir $d && cd $d && ))
	cd $(PREFIX);tar -zcf $(OLD_PREFIX)/$(CORE_TARBALL_NAME) *
	rm -rf $(PREFIX)


clean : $(addsuffix _clean,$(CONF_DEPS))
	-rm -rf Makefile.hist

installclean : $(addsuffix _installclean,$(CONF_DEPS))
	
distclean :
	-rm -rf Makefile Makefile.hist env-shell.sh 
	$(foreach var,$(CONF_DEPS) $(PYTHON_DEPS),rm -rf $(call getconfdir,$(var)) $(notdir $(call geturi,$(var)));)


# download commands are dynamically generated based on DEPS
define download_expand
 $(eval url = $(strip $(call geturi,$1)))
 $(eval file = $(notdir $(url)))
 $(eval dir = $(call getdirname,$(file)))
 $(file) : 
	$(WWW) $(WWWFLAGS) $(file) $(url)
 $(dir) : $(file)
	tar -zxf $(file);touch $(dir)
 $1_download : $(dir)
endef
$(eval $(foreach var,$(CONF_DEPS) $(PYTHON_DEPS),$(call download_expand,$(var))))


# general clean
%_clean :
	$(eval dirname:=$(call getconfdir,$(firstword $(subst _, ,$@))))
	-$(if $(wildcard $(dirname)/Makefile),cd $(dirname);$(MAKE) clean,)


# now list the build instructions for each dependency

libtool_configure : libtool_core_config
	$(call moduleinstalled,libtool)
libtool_core_config : $(call getconfdir,libtool)/Makefile
	$(eval dir:=$(call getconfdir,libtool))
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
$(call getconfdir,libtool)/Makefile : libtool_download
	cd $(call getconfdir,libtool);./configure --prefix=$(PREFIX)
libtool_installclean : 
	rm -rf $(call getconfdir,libtool)/Makefile

openssl_configure : openssl_core_config
	$(call moduleinstalled,openssl)
openssl_core_config : openssl_download
	$(eval dir:=$(call getconfdir,openssl))
	cd $(dir);./config --prefix=$(PREFIX) -fPIC shared
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
openssl_installclean : 


bzip2_configure : bzip2_core_config
	$(call moduleinstalled,bzip2)
bzip2_core_config : 
	$(eval dir:=$(call getconfdir,bzip2))
	$(MAKE) -C $(dir) clean
	$(MAKE) -C $(dir) -f Makefile-libbz2_so PREFIX=$(PREFIX)
	cp -f $(dir)/libbz2.so.1.0.6 $(PREFIX)/lib
	ln -fs $(PREFIX)/lib/libbz2.so.1.0.6 $(PREFIX)/lib/libbz2.so.1.0
	ln -fs $(PREFIX)/lib/libbz2.so.1.0.6 $(PREFIX)/lib/libbz2.so.1
	ln -fs $(PREFIX)/lib/libbz2.so.1.0.6 $(PREFIX)/lib/libbz2.so
	$(MAKE) -C $(dir) clean
	$(MAKE) -C $(dir) PREFIX=$(PREFIX)
	$(MAKE) -C $(dir) install PREFIX=$(PREFIX)
bzip2_installclean : 
	$(eval url = $(strip $(call geturi,bzip2)))
	$(eval file = $(notdir $(url)))
	$(eval dir:=$(call getconfdir,bzip2))
	-rm -rf $(dir)
	tar -zxf $(file);touch $(dir)


ncurses_configure : ncurses_core_config
	$(call moduleinstalled,ncurses)
ncurses_core_config : $(call getconfdir,ncurses)/Makefile
	$(eval dir:=$(call getconfdir,ncurses))
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
	ln -fs $(PREFIX)/include/ncursesw/ncurses.h $(PREFIX)/include/ncurses.h
	ln -fs $(PREFIX)/include/ncursesw/curses.h $(PREFIX)/include/curses.h
	ln -fs $(PREFIX)/include/ncursesw/panel.h $(PREFIX)/include/panel.h
$(call getconfdir,ncurses)/Makefile : ncurses_download
	cd $(call getconfdir,ncurses);./configure --prefix=$(PREFIX) --enable-widec --with-shared
ncurses_installclean : 
	-rm -rf $(call getconfdir,ncurses)/Makefile


readline_configure : readline_core_config
	$(call moduleinstalled,readline)
readline_core_config : $(call getconfdir,readline)/Makefile
	$(eval dir:=$(call getconfdir,readline))
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
$(call getconfdir,readline)/Makefile : readline_download
	cd $(call getconfdir,readline);./configure --prefix=$(PREFIX) --enable-multibyte --with-curses
readline_installclean : 
	-rm -rf $(call getconfdir,readline)/Makefile


gettext_configure : gettext_core_config
	$(call moduleinstalled,gettext)
gettext_core_config : $(call getconfdir,gettext)/Makefile
	$(eval dir:=$(call getconfdir,gettext))
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
$(call getconfdir,gettext)/Makefile : gettext_download
	cd $(call getconfdir,gettext);./configure --prefix=$(PREFIX)
gettext_installclean : 
	-rm -rf $(call getconfdir,gettext)/Makefile


expat_configure : expat_core_config
	$(call moduleinstalled,expat)
expat_core_config : $(call getconfdir,expat)/Makefile
	$(eval dir:=$(call getconfdir,expat))
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
$(call getconfdir,expat)/Makefile : expat_download
	cd $(call getconfdir,expat);./configure --prefix=$(PREFIX)
expat_installclean : 
	-rm -rf $(call getconfdir,expat)/Makefile


# this is a globus dependency
# delete perl after building; configure script does not update
#  prefix if run multiple times
perl_configure : perl_extras_config
	$(call moduleinstalled,perl)
perl_core_config : perl_download
	$(eval dir:=$(call getconfdir,perl))
	cd $(dir);./Configure -des -Dprefix=$(PREFIX)
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
perl_extras_config : perl_core_config
	cpan App:cpanminus
	cpanm Archive::Tar
	cpanm Compress::Zlib
	cpanm Digest::MD5
	cpanm File::Spec
	cpanm IO::Zlib
	cpanm Pod::Parser
	cpanm Test::Simple
	C_INCLUDE_PATH=$(C_INCLUDE_PATH) LIBRARY_PATH=$(LIBRARY_PATH) cpanm XML::Parser
perl_installclean : 
	$(eval url = $(strip $(call geturi,perl)))
	$(eval file = $(notdir $(url)))
	$(eval dir:=$(call getconfdir,perl))
	-rm -rf $(dir)
	tar -zxf $(file);touch $(dir)


Python_configure : Python_core_config
	$(call moduleinstalled,Python)
Python_core_config : $(call getconfdir,Python)/Makefile
	$(eval dir:=$(call getconfdir,Python))
	C_INCLUDE_PATH=$(C_INCLUDE_PATH) LIBRARY_PATH=$(LIBRARY_PATH) $(MAKE) -C $(dir)
	C_INCLUDE_PATH=$(C_INCLUDE_PATH) LIBRARY_PATH=$(LIBRARY_PATH) $(MAKE) -C $(dir) install
$(call getconfdir,Python)/Makefile : Python_download
	C_INCLUDE_PATH=$(C_INCLUDE_PATH) LIBRARY_PATH=$(LIBRARY_PATH) cd $(call getconfdir,Python);./configure --prefix=$(PREFIX) --enable-shared
Python_installclean : 
	-rm -rf $(call getconfdir,Python)/Makefile


libxml2_configure : libxml2_core_config 
	$(call moduleinstalled,libxml2)
libxml2_core_config : $(call getconfdir,libxml2)/Makefile
	$(eval dir:=$(call getconfdir,libxml2))
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
$(call getconfdir,libxml2)/Makefile : libxml2_download
	cd $(call getconfdir,libxml2);./configure --prefix=$(PREFIX) LDFLAGS=-L$(PREFIX)/lib/
libxml2_installclean : 
	-rm -rf $(call getconfdir,libxml2)/Makefile


libxslt_configure : libxslt_core_config
	$(call moduleinstalled,libxslt)
libxslt_core_config : $(call getconfdir,libxslt)/Makefile
	$(eval dir:=$(call getconfdir,libxslt))
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
$(call getconfdir,libxslt)/Makefile : libxslt_download
	cd $(call getconfdir,libxslt);./configure --prefix=$(PREFIX) LDFLAGS=-L$(PREFIX)/lib/
libxslt_installclean : 
	-rm -rf $(call getconfdir,libxslt)/Makefile


pcre_configure : pcre_core_config
	$(call moduleinstalled,pcre)
pcre_core_config : pcre_download
	$(eval dir:=$(call getconfdir,pcre))
	cd $(dir);./configure --prefix=$(PREFIX)
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
pcre_installclean : 
	$(eval url = $(strip $(call geturi,pcre)))
	$(eval file = $(notdir $(url)))
	$(eval dir:=$(call getconfdir,pcre))
	-rm -rf $(dir)
	tar -zxf $(file);touch $(dir)


nginxuploadmodule_configure : nginxuploadmodule_download
nginxuploadmodule_installclean : 


nginx_configure : nginx_core_config
	$(call moduleinstalled,nginx)
nginx_core_config : $(call getconfdir,nginx)/Makefile
	$(eval dir:=$(call getconfdir,nginx))
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
$(call getconfdir,nginx)/Makefile : nginx_download
	$(eval dirname:=$(call getconfdir,nginx))
	$(eval pcredirname:=$(call getconfdir,pcre))
	$(eval uploadmoddirname:=$(call getconfdir,nginxuploadmodule))
	cd $(dirname);./configure --prefix=$(PREFIX) --with-ipv6 --with-http_ssl_module --without-http_geo_module \
--without-http_map_module --without-http_fastcgi_module --without-http_memcached_module --without-mail_pop3_module \
--without-mail_imap_module --without-mail_smtp_module --without-http_uwsgi_module --without-http_scgi_module \
--without-http_upstream_ip_hash_module --with-pcre=../$(pcredirname) --add-module=../$(uploadmoddirname) \
--error-log-path=$(PREFIX)/var/log/nginx/error.log --http-log-path=$(PREFIX)/var/log/nginx/access.log \
--pid-path=$(PREFIX)/var/run/nginx.pid
nginx_installclean : 
	-rm -rf $(call getconfdir,nginx)/Makefile

curl_configure : curl_core_config
	$(call moduleinstalled,curl)
curl_core_config : $(call getconfdir,curl)/config.log
	$(eval dir:=$(call getconfdir,curl))
	$(MAKE) -C $(dir)
	$(MAKE) -C $(dir) install
$(call getconfdir,curl)/config.log : curl_download
	cd $(call getconfdir,curl);./configure --prefix=$(PREFIX) --with-ssl=$(PREFIX)
curl_installclean : 
	-rm -rf $(call getconfdir,curl)/config.log

p7zip_configure : p7zip_core_config
	$(call moduleinstalled,p7zip)
p7zip_core_config : p7zip_download
	$(eval dir:=$(call getconfdir,p7zip))
	$(eval localplatform:=$(subst ., ,$(PLATFORM)))
	$(eval ostype:=$(if $(filter Darwin,$(localplatform)),mac,linux))
	cd $(dir);cp makefile.$(if $(call eq,$(ostype),mac),macosx_$(if $(filter x86_64,$(localplatform)),64bits,32bits),linux_$(if $(filter x86_64,$(localplatform)),amd64,any_cpu)) makefile.machine
	$(MAKE) -C $(dir) DEST_HOME=$(PREFIX)
	$(MAKE) -C $(dir) install DEST_HOME=$(PREFIX)
p7zip_installclean :
	$(eval url = $(strip $(call geturi,p7zip)))
	$(eval file = $(notdir $(url)))
	$(eval dir:=$(call getconfdir,p7zip))
	-rm -rf $(dir)
	tar -zxf $(file);touch $(dir)

globus_configure : globus_core_config
	$(call moduleinstalled,globus)
globus_core_config : $(call getconfdir,globus)/Makefile
	$(eval dir:=$(call getconfdir,globus))
	$(if $(wildcard $(PREFIX)/etc),,mkdir $(PREFIX)/etc)
	C_INCLUDE_PATH=$(C_INCLUDE_PATH) LIBRARY_PATH=$(LIBRARY_PATH) $(MAKE) -C $(dir) gpt globus-data-management-client
	C_INCLUDE_PATH=$(C_INCLUDE_PATH) LIBRARY_PATH=$(LIBRARY_PATH) $(MAKE) -C $(dir) install
$(call getconfdir,globus)/Makefile : globus_download
	cd $(call getconfdir,globus);./configure --prefix=$(PREFIX)
#	cd $(call getconfdir,globus);./configure --prefix=$(PREFIX) --with-buildopts="--with-openssl=$(PREFIX)"
globus_installclean : 
	-rm -rf $(call getconfdir,globus)/Makefile


git_configure : git_core_config
	$(call moduleinstalled,git)
git_core_config : git_download
	$(eval dir:=$(call getconfdir,git))
	C_INCLUDE_PATH=$(C_INCLUDE_PATH) LIBRARY_PATH=$(LIBRARY_PATH) $(MAKE) -C $(dir) prefix=$(PREFIX) all NO_TCLTK=YesPlease
	C_INCLUDE_PATH=$(C_INCLUDE_PATH) LIBRARY_PATH=$(LIBRARY_PATH) $(MAKE) -C $(dir) prefix=$(PREFIX) install NO_TCLTK=YesPlease
git_installclean :
	$(eval url = $(strip $(call geturi,git)))
	$(eval file = $(notdir $(url)))
	$(eval dir:=$(call getconfdir,git))
	-rm -rf $(dir)
	tar -zxf $(file);touch $(dir)	


pyconfig=cd $(call getconfdir,$(firstword $(subst _, ,$(1))));python setup.py build;python setup.py install

setuptools_configure : setuptools_core_config
	$(call moduleinstalled,setuptools)
setuptools_core_config : setuptools_download
	$(call pyconfig,$@)

pyOpenSSL_configure : pyOpenSSL_core_config
	$(call moduleinstalled,pyOpenSSL)
pyOpenSSL_core_config : pyOpenSSL_download
	$(call pyconfig,$@)

pyasn1_configure : pyasn1_core_config
	$(call moduleinstalled,pyasn1)
pyasn1_core_config : pyasn1_download
	$(call pyconfig,$@)

apsw_configure : apsw_core_config
	$(call moduleinstalled,apsw)
apsw_core_config : apsw_download
	cd $(call getconfdir,apsw);python setup.py fetch --sqlite --missing-checksum-ok;python setup.py build;python setup.py install

lxml_configure : lxml_core_config
	$(call moduleinstalled,lxml)
lxml_core_config : lxml_download
	$(call pyconfig,$@)

pycurl_configure : pycurl_core_config
	$(call moduleinstalled,pycurl)
pycurl_core_config : pycurl_download
	$(call pyconfig,$@)

tornado_configure : tornado_core_config
	$(call moduleinstalled,tornado)
tornado_core_config : tornado_download
	$(call pyconfig,$@)

jsonrpclib_configure : jsonrpclib_core_config
	$(call moduleinstalled,jsonrpclib)
jsonrpclib_core_config : jsonrpclib_download
	$(call pyconfig,$@)

tornadorpc_configure : tornadorpc_core_config
	$(call moduleinstalled,tornadorpc)
tornadorpc_core_config : tornadorpc_download
	$(call pyconfig,$@)

pyuv_configure : pyuv_core_config
	$(call moduleinstalled,pyuv)
pyuv_core_config : pyuv_download
	$(call pyconfig,$@)

pyuvtornado_configure : pyuvtornado_core_config
	$(call moduleinstalled,pyuvtornado)
pyuvtornado_core_config : pyuvtornado_download
	$(call pyconfig,$@)

pygridftp_configure : pygridftp_core_config
	$(call moduleinstalled,pygridftp)
pygridftp_core_config : pygridftp_download
	$(call pyconfig,$@)

configobj_configure : configobj_core_config
	$(call moduleinstalled,configobj)
configobj_core_config : configobj_download
	$(call pyconfig,$@)

coverage_configure : coverage_core_config
	$(call moduleinstalled,coverage)
coverage_core_config : coverage_download
	$(call pyconfig,$@)

flexmock_configure : flexmock_core_config
	$(call moduleinstalled,flexmock)
flexmock_core_config : flexmock_download
	$(call pyconfig,$@)


iceprod_config : iceprod_base $(ICEPROD)

iceprod_config_core : iceprod_base $(ICEPROD_CORE)

iceprod_base : 
	cd iceprod;python setup.py install

$(ICEPROD) :
	cd $@;python setup.py install

env-shell : 
	cp env-shell.sh $(PREFIX)/env-shell.sh

misc_config : $(PREFIX)/etc/cacerts.crt
	chmod -Rf 755 $(PREFIX)/share/doc/p7zip
	$(if $(wildcard $(PREFIX)/var),,mkdir $(PREFIX)/var)
	$(if $(wildcard $(PREFIX)/var/www),,mkdir $(PREFIX)/var/www)
	$(if $(wildcard $(PREFIX)/var/www_uploads),,mkdir $(PREFIX)/var/www_uploads)
	$(if $(wildcard $(PREFIX)/var/run),,mkdir $(PREFIX)/var/run)
	$(if $(wildcard $(PREFIX)/var/lib),,mkdir $(PREFIX)/var/lib)
	$(if $(wildcard $(PREFIX)/var/lib/iceprod),,mkdir $(PREFIX)/var/lib/iceprod)
	$(if $(wildcard $(PREFIX)/man),cp -rf $(PREFIX)/man $(PREFIX)/share/man;rm -rf $(PREFIX)/man,)
	$(if $(wildcard $(PREFIX)/logs),rm -rf $(PREFIX)/logs)
	$(if $(wildcard $(PREFIX)/log),,mkdir $(PREFIX)/log)

# get the CA certificates from curl, which is a weekly update from Mozilla
$(PREFIX)/etc/cacerts.crt : 	
	$(WWW) $(WWWFLAGS) $(PREFIX)/etc/cacerts.crt http://curl.haxx.se/ca/cacert.pem


# echo vars
echo :
	echo $(CONF_DEPS)
	echo $(PYTHON_DEPS)
	echo $(CORE_DEPS)

cmds : 
	echo $(MAKECMDGOALS)


.PHONY : clean distclean installclean build install install_build install_config install_core installcore_config exportvars misc_config iceprod_base iceprod_config iceprod_config_core $(ICEPROD) $(suffix _download,$(CONF_DEPS) $(PYTHON_DEPS)) $(suffix _configure, $(CONF_DEPS) $(PYTHON_DEPS))
